{
 "metadata": {
  "name": "",
  "signature": "sha256:4a35d7407a665cdbe7c28ce79f04e41b5922110bffe7e70a5a00b3ddb7c28ac4"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Hit-and-Run's 2009-2012 Analysis: Three Questions "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "\n",
      "pd.set_option('display.height', 500)\n",
      "pd.set_option('display.max_rows', 810)\n",
      "pd.set_option('display.max_columns',35)\n",
      "\n",
      "df = pd.read_csv('hnr0914.csv') \n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "height has been deprecated.\n",
        "\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Create a new frame consisting of only 2009-2012\n",
      "df_09_12 = df[(df.complaint_year == 2009) | \\\n",
      "              (df.complaint_year == 2010) | \\\n",
      "              (df.complaint_year == 2011) | \\\n",
      "              (df.complaint_year == 2012)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Cleaning up the set,  dropping all final dispositions that are either Dismissed or were NaN.\n",
      "#NaN cases mean that the case is still in progress and no sentence has verdict has been given\n",
      "df_09_12 = df_09_12[df_09_12.final_disposition.str.contains(\"Dismissed\") == False]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Total cases with a sentence given and not dismissed: 541"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#All final dispositions are non-null\n",
      "chk_null = df_09_12.apply(lambda x : pd.isnull(df_09_12.final_disposition))\n",
      "len(df_09_12)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "541"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Cases by year with and without incarceration given"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_09 = df_09_12[df_09_12.complaint_year== 2009]\n",
      "df_10 = df_09_12[df_09_12.complaint_year== 2010]\n",
      "df_11 = df_09_12[df_09_12.complaint_year== 2011]\n",
      "df_12 = df_09_12[df_09_12.complaint_year== 2012]\n",
      "\n",
      "nojail_09 = len(df_09[ pd.isnull( df_09.incar )])\n",
      "nojail_10 = len(df_10[ pd.isnull( df_10.incar )])\n",
      "nojail_11 = len(df_11[ pd.isnull( df_11.incar )])\n",
      "nojail_12 = len(df_12[ pd.isnull( df_12.incar )])\n",
      "\n",
      "jail_09 = len(df_09[ pd.isnull( df_09.incar ) == False])\n",
      "jail_10 = len(df_10[ pd.isnull( df_10.incar ) == False])\n",
      "jail_11 = len(df_11[ pd.isnull( df_11.incar ) == False])\n",
      "jail_12 = len(df_12[ pd.isnull( df_12.incar ) == False])\n",
      "\n",
      "print \"Total cases 2009: \",len(df_09),\" Cases w/o incarceration: \", nojail_09 ,\" Cases w incarceration: \", jail_09 \n",
      "print \"Total cases 2010: \",len(df_10),\" Cases w/o incarceration: \", nojail_10 ,\" Cases w incarceration: \", jail_10\n",
      "print \"Total cases 2011: \",len(df_11),\" Cases w/o incarceration: \", nojail_11 ,\" Cases w incarceration: \", jail_11\n",
      "print \"Total cases 2012: \",len(df_12),\" Cases w/o incarceration: \", nojail_12 ,\" Cases w incarceration: \", jail_12"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Total cases 2009:  155  Cases w/o incarceration:  38  Cases w incarceration:  117\n",
        "Total cases 2010:  136  Cases w/o incarceration:  36  Cases w incarceration:  100\n",
        "Total cases 2011:  118  Cases w/o incarceration:  44  Cases w incarceration:  74\n",
        "Total cases 2012:  132  Cases w/o incarceration:  41  Cases w incarceration:  91\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Percentages... Interesting change here"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"Percentage w/o incarceration 09': \", (float(nojail_09)/len(df_09)) * 100,\"%\"\n",
      "print \"Percentage w/o incarceration 10': \", (float(nojail_10)/len(df_10)) * 100,\"%\"\n",
      "print \"Percentage w/o incarceration 11': \", (float(nojail_11)/len(df_11)) * 100,\"%\"\n",
      "print \"Percentage w/o incarceration 12': \", (float(nojail_12)/len(df_12)) * 100,\"%\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Percentage w/o incarceration 09':  24.5161290323 %\n",
        "Percentage w/o incarceration 10':  26.4705882353 %\n",
        "Percentage w/o incarceration 11':  37.2881355932 %\n",
        "Percentage w/o incarceration 12':  31.0606060606 %\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"Percentage w incarceration 09': \", (float(jail_09)/len(df_09)) * 100,\"%\"\n",
      "print \"Percentage w incarceration 10': \", (float(jail_10)/len(df_10)) * 100,\"%\"\n",
      "print \"Percentage w incarceration 11': \", (float(jail_11)/len(df_11)) * 100,\"%\"\n",
      "print \"Percentage w incarceration 12': \", (float(jail_12)/len(df_12)) * 100,\"%\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Percentage w incarceration 09':  75.4838709677 %\n",
        "Percentage w incarceration 10':  73.5294117647 %\n",
        "Percentage w incarceration 11':  62.7118644068 %\n",
        "Percentage w incarceration 12':  68.9393939394 %\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Why the jump in 2011 and 2012? Were the prison overcrowding laws which Gov. Brown signed into law in 2011 a factor?... And then a corresponding decrease in incarcerations for the same years?  Interesting!!!\n",
      "With that trend, in 2008 you likely had about a 25.5% chance of not getting jail time and a 74.5% chance that you would get jail time(averageing 2009 and 2010, before the change)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "chgcount_09 = df_09.groupby('highest_charge')\n",
      "chgcount_10 = df_10.groupby('highest_charge')\n",
      "chgcount_11 = df_11.groupby('highest_charge')\n",
      "chgcount_12 = df_12.groupby('highest_charge') \n",
      "\n",
      "\n",
      "#print \"2009 \",chgcount_09.highest_charge.count(), \"\\t2010 \",chgcount_09.highest_charge.count()\n",
      "\n",
      "table_df = pd.DataFrame({'2009' : chgcount_09.highest_charge.count(),\n",
      "                         '2010' : chgcount_10.highest_charge.count(),\n",
      "                         '2011' : chgcount_11.highest_charge.count(),\n",
      "                         '2012' : chgcount_12.highest_charge.count()})"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Incarceration times given for each highest charge full list 2009-2012"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "incar_times = df_09_12.groupby(['highest_charge','incar']).size()\n",
      "print incar_times"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "highest_charge    incar\n",
        "HS11350(a)        90        1\n",
        "HS11352(a)        730       1\n",
        "HS11359           180       1\n",
        "HS11379(a)        180       1\n",
        "PC187(a)          5475      1\n",
        "                  5840      1\n",
        "                  7300      1\n",
        "                  9490      1\n",
        "PC187(a) - PC664  1460      1\n",
        "PC191.5(a)        1460      1\n",
        "                  2190      1\n",
        "                  2920      1\n",
        "                  4015      2\n",
        "                  5110      1\n",
        "                  5475      1\n",
        "                  6448      1\n",
        "                  8030      1\n",
        "PC191.5(b)        2312      1\n",
        "PC192(c)(1)       1582      1\n",
        "PC207(a)          3163      1\n",
        "PC211             730       1\n",
        "PC215(a)          1095      1\n",
        "PC245(a)(1)       5         1\n",
        "                  180       2\n",
        "                  270       1\n",
        "                  365       5\n",
        "                  730       1\n",
        "                  851       1\n",
        "                  1095      1\n",
        "                  1460      2\n",
        "                  2433      1\n",
        "PC245(a)(4)       180       1\n",
        "PC245(c)          1825      1\n",
        "                  2190      1\n",
        "PC273.5(a)        240       1\n",
        "                  4623      1\n",
        "PC273a(a)         5         1\n",
        "                  365       1\n",
        "                  730       3\n",
        "PC368(b)(1)       259       1\n",
        "PC459             1338      1\n",
        "PC484 & 490.5     1460      1\n",
        "PC69              180       1\n",
        "VC10851(a)        32        1\n",
        "                  40        1\n",
        "                  486       1\n",
        "                  730       1\n",
        "                  1095      2\n",
        "                  1338      1\n",
        "                  1582      1\n",
        "                  1703      1\n",
        "                  1825      1\n",
        "VC20001(a)        1         3\n",
        "                  2         2\n",
        "                  4         1\n",
        "                  6         2\n",
        "                  8         1\n",
        "                  12        1\n",
        "                  25        1\n",
        "                  28        1\n",
        "                  29        1\n",
        "                  30        1\n",
        "                  37        1\n",
        "                  44        1\n",
        "                  60        2\n",
        "                  85        1\n",
        "                  90        3\n",
        "                  101       1\n",
        "                  112       1\n",
        "                  120       7\n",
        "                  136       1\n",
        "                  145       1\n",
        "                  152       1\n",
        "                  170       1\n",
        "                  180      16\n",
        "                  189       1\n",
        "                  201       1\n",
        "                  208       1\n",
        "                  216       1\n",
        "                  240       4\n",
        "                  243       3\n",
        "                  270       7\n",
        "                  364       1\n",
        "                  365      13\n",
        "                  486       3\n",
        "                  545       1\n",
        "                  730       6\n",
        "                  973       2\n",
        "                  1460      2\n",
        "                  1825      1\n",
        "                  2920      1\n",
        "VC20001(b)(2)     1         1\n",
        "                  10        1\n",
        "                  120       1\n",
        "                  365       8\n",
        "                  730       2\n",
        "                  1095      1\n",
        "                  1460      1\n",
        "VC23152(a)        1095      1\n",
        "                  3163      1\n",
        "VC23153(a)        2         1\n",
        "                  5        15\n",
        "                  6         1\n",
        "                  8         1\n",
        "                  10        2\n",
        "                  16        1\n",
        "                  18        1\n",
        "                  20        2\n",
        "                  21        1\n",
        "                  24        1\n",
        "                  27        1\n",
        "                  30        3\n",
        "                  38        1\n",
        "                  39        1\n",
        "                  45        1\n",
        "                  61        1\n",
        "                  68        2\n",
        "                  80        1\n",
        "                  90        9\n",
        "                  96        1\n",
        "                  120      10\n",
        "                  150       4\n",
        "                  169       1\n",
        "                  180      30\n",
        "                  184       1\n",
        "                  210       1\n",
        "                  232       1\n",
        "                  240       6\n",
        "                  248       1\n",
        "                  270      10\n",
        "                  360       1\n",
        "                  365      32\n",
        "                  452       1\n",
        "                  486       3\n",
        "                  730       8\n",
        "                  852       1\n",
        "                  973       6\n",
        "                  1095      2\n",
        "                  1185      1\n",
        "                  1582      5\n",
        "                  1703      1\n",
        "                  1825      4\n",
        "                  2190      2\n",
        "                  2353      1\n",
        "                  2433      1\n",
        "                  2555      2\n",
        "                  2677      1\n",
        "                  2798      1\n",
        "                  3042      1\n",
        "                  5110      1\n",
        "                  6083      1\n",
        "VC23153(b)        730       1\n",
        "VC2800.2(a)       120       1\n",
        "                  365       1\n",
        "                  730       1\n",
        "                  973       1\n",
        "                  1460      2\n",
        "                  1825      1\n",
        "                  1947      1\n",
        "                  2555      1\n",
        "VC2800.3(a)       180       1\n",
        "                  365       1\n",
        "                  1217      1\n",
        "                  1582      1\n",
        "                  3407      1\n",
        "                  5475      1\n",
        "Length: 166, dtype: int64\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Cases per year for each charge"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Lets say you look at VC20001 cases as a group (combine a & b).  Then you have 52, 60, 52, and 45 for 09', 10', 11', 12' respectively. Doing the same for VC23153 (a/b) you have 75, 54, 53, 58.  So really they stay relatively close.  Its not as though people started getting charged with a different offence per case.  What is the sentencing looking like?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print table_df"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "                  2009  2010  2011  2012\n",
        "HS11350(a)         NaN     1   NaN     1\n",
        "HS11352(a)         NaN   NaN     1   NaN\n",
        "HS11359            NaN   NaN     1   NaN\n",
        "HS11379(a)           1   NaN   NaN   NaN\n",
        "PC187(a)             2     1     1   NaN\n",
        "PC187(a) - PC664     1   NaN   NaN   NaN\n",
        "PC191.5(a)           4     1     2     2\n",
        "PC191.5(b)         NaN     1   NaN   NaN\n",
        "PC192(c)(1)          1   NaN     1   NaN\n",
        "PC207(a)           NaN   NaN   NaN     1\n",
        "PC211                1   NaN   NaN   NaN\n",
        "PC215(a)           NaN   NaN   NaN     1\n",
        "PC245(a)(1)          7     6     3     8\n",
        "PC245(a)(4)        NaN   NaN   NaN     1\n",
        "PC245(c)             2   NaN   NaN   NaN\n",
        "PC273.5(a)         NaN     1   NaN     1\n",
        "PC273a(a)            2     2   NaN     2\n",
        "PC368(b)(1)        NaN   NaN     1   NaN\n",
        "PC459              NaN     1   NaN   NaN\n",
        "PC484 & 490.5      NaN   NaN     1   NaN\n",
        "PC69               NaN     1   NaN   NaN\n",
        "VC10851(a)           3     4   NaN     3\n",
        "VC20001(a)          52    54    45    38\n",
        "VC20001(b)(2)      NaN     6     7     7\n",
        "VC23152(a)         NaN   NaN   NaN     2\n",
        "VC23153(a)          74    54    53    58\n",
        "VC23153(b)           1   NaN   NaN   NaN\n",
        "VC2800.2(a)          3     1     2     3\n",
        "VC2800.3(a)          1     2   NaN     4\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#if incar is null we leave it out of the dataframe\n",
      "df_09incar = df_09[ ~pd.isnull(df_09.incar) ]\n",
      "df_10incar = df_10[ ~pd.isnull(df_10.incar) ]\n",
      "df_11incar = df_11[ ~pd.isnull(df_11.incar) ]\n",
      "df_12incar = df_12[ ~pd.isnull(df_12.incar) ]\n",
      "\n",
      "#if incar is null we leave it in the set\n",
      "df_09noincar = df_09[ pd.isnull(df_09.incar) ]\n",
      "df_10noincar = df_10[ pd.isnull(df_10.incar) ]\n",
      "df_11noincar = df_11[ pd.isnull(df_11.incar) ]\n",
      "df_12noincar = df_12[ pd.isnull(df_12.incar) ]\n",
      "\n",
      "#groupings to see if the highest charge is what they recieved for incarcerations\n",
      "grp9 = df_09incar.groupby([df_09incar.highest_charge, df_09incar.highest_dispo_charge])\n",
      "grp10 = df_10incar.groupby([df_10incar.highest_charge, df_10incar.highest_dispo_charge])\n",
      "grp11 = df_11incar.groupby([df_11incar.highest_charge, df_11incar.highest_dispo_charge])\n",
      "grp12 = df_12incar.groupby([df_12incar.highest_charge, df_12incar.highest_dispo_charge])\n",
      "\n",
      "no_grp9 = df_09incar.groupby([df_09noincar.highest_charge, df_09noincar.highest_dispo_charge])\n",
      "no_grp10 = df_10incar.groupby([df_10noincar.highest_charge, df_10noincar.highest_dispo_charge])\n",
      "no_grp11 = df_11incar.groupby([df_11noincar.highest_charge, df_11noincar.highest_dispo_charge])\n",
      "no_grp12 = df_12incar.groupby([df_12noincar.highest_charge, df_12noincar.highest_dispo_charge])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Quick summary for the cells below:"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "For a highest charge given being VC20001 or  VC23153 the incarcerated recieved that  same charge better than 90% of the time for all 4 years."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "grp9.size()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "grp10.size()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "grp11.size()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "grp12.size()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}